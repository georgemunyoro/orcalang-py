func strlen(s: char*) -> i32 {
    let res: i32 = 0;
    for (let i: i32 = 0; s[i] != *("\0"); i = i + 1) {
        res = res + 1;
    }
    return res;
}

func atoi(s: char*) -> i32 {
    let res: i32 = 0;
    for (let i: i32 = 0; i < strlen(s); i = i + 1) {
        res = res * 10 + (i32)(s[i]) - (i32)("0"[0]);
    }
    return res;
}

func memset(s: char*, c: char, len: i32) -> char* {
    let p: char* = s;
    while (len > 0) {
        *p = c;
        p = (char*)((i64)p + (i64)1);
        len = len - 1;
    }
    return s;
}

func nsieve(m: i32) -> void {
    let count: i32 = 0;
    let flags: char* = (char*)malloc(m*sizeof(char));

    memset(flags, (char)1, m);

    for (let i: i32 = 2; i < m; i = i + 1) {
        if ((i32)(flags[i]) > 0) {
            count = count + 1;

            for (let j: i32 = (i << 1); j < m; j = j + i) {
                flags[j] = (char)0;
            }
        }
    }

    free((i32*)flags);
    printf("Primes up to %8u %8u\n", m, count);
}

func main(argc: i32, argv: char**) -> i32 {
    let m: i32 = atoi(argv[1]);
    for (let i: i32 = 0; i < 3; i = i + 1) {
        nsieve(10000 << (m - i));
    }
    return 0;
}
